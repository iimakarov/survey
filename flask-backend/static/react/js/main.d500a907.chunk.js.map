{"version":3,"sources":["RadioButtonComponent.js","TitleComponent.js","DialogComponent.js","TextFieldComponent.js","RatingComponent.js","App.js","serviceWorker.js","index.js"],"names":["RadioButtonComponent","title","description","questionId","questionValueExpr","onChangeEvent","radioOpts","textInput","undefined","checkBoxData","Container","component","Box","p","Paper","Typography","variant","align","addCheckBox","FormControlLabel","control","Checkbox","checked","isChecked","onChange","name","color","label","RadioGroup","aria-label","value","hasTextInput","TextField","fullWidth","margin","InputLabelProps","shrink","saveComment","TitleComponent","gutterBottom","DialogComponent","openState","closeEvent","secondDescription","textFieldData","buttonOnClick","buttonText","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","length","autoFocus","textOnChange","helperText","error","DialogActions","Button","onClick","TextFieldComponent","onCommentChange","RatingComponent","currentValue","Rating","size","survey","JSON","parse","decode","window","App","onUpdateUser","e","setState","user","target","onUserClick","initialItems","items","item","push","answer","comment","type","isFinished","checkBoxChecked","state","openLoginPage","onRadioRatingChange","currentState","Object","assign","itemIndex","findIndex","elem","onCheckBoxChange","onSubmit","preventDefault","every","i","url","data","surveyId","post","headers","then","response","console","log","location","catch","openNotFinished","setClose","bind","answerOpts","choiceOpts","split","opt","Radio","map","c","includes","filter","addTextBox","className","this","join","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.d500a907.chunk.js","sourcesContent":["import React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction RadioButtonComponent({\r\n  title,\r\n  description,\r\n  questionId,\r\n  questionValueExpr,\r\n  onChangeEvent,\r\n  radioOpts,\r\n  textInput = undefined,\r\n  checkBoxData = undefined,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {description}\r\n          </Typography>\r\n          {typeof checkBoxData !== undefined && checkBoxData.addCheckBox ? (\r\n            <div align=\"left\">\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={checkBoxData.isChecked}\r\n                    onChange={checkBoxData.onChange}\r\n                    name={questionId}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Пропустить данный вопрос\"\r\n              />\r\n              <br></br>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <label>\r\n            <RadioGroup\r\n              aria-label=\"radio\"\r\n              name={questionId}\r\n              value={questionValueExpr}\r\n              onChange={onChangeEvent}\r\n            >\r\n              {radioOpts}\r\n            </RadioGroup>\r\n          </label>\r\n          {typeof textInput !== undefined && textInput.hasTextInput ? (\r\n            <TextField\r\n              name={questionId}\r\n              label=\"Комментарий\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={textInput.saveComment}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RadioButtonComponent;\r\n","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport \"./App.css\";\r\n\r\nfunction TitleComponent({ title, description }) {\r\n  return (\r\n    <Container component={Box}>\r\n      <Box p={2} component={Paper}>\r\n        <Typography variant=\"h3\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          {description}\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TitleComponent;\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction DialogComponent({\r\n  openState,\r\n  closeEvent,\r\n  title,\r\n  description,\r\n  secondDescription,\r\n  textFieldData,\r\n  buttonOnClick,\r\n  buttonText,\r\n}) {\r\n  return (\r\n    <Dialog\r\n      open={openState}\r\n      onClose={closeEvent}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>{description}</DialogContentText>\r\n        {secondDescription && secondDescription.length ? (\r\n          <DialogContentText>{secondDescription}</DialogContentText>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {typeof textFieldData !== \"undefined\" ? (\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id={textFieldData.id}\r\n            label={textFieldData.label}\r\n            fullWidth\r\n            value={textFieldData.value}\r\n            onChange={textFieldData.textOnChange}\r\n            helperText={textFieldData.error ? \"Неверный ввод\" : \"\"}\r\n            error={textFieldData.error}\r\n          />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={buttonOnClick} color=\"primary\">\r\n          {buttonText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default DialogComponent;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction TextFieldComponent({\r\n  title,\r\n  description,\r\n  id,\r\n  onCommentChange\r\n}) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {description}\r\n          </Typography>\r\n          <TextField\r\n            name={id}\r\n            label=\"Комментарий\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            onChange={onCommentChange}\r\n          />\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextFieldComponent;\r\n","import React from \"react\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nfunction RatingComponent({\r\n  title,\r\n  description,\r\n  questionId,\r\n  currentValue,\r\n  onChangeEvent,\r\n  textInput = undefined,\r\n  checkBoxData = undefined,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Container component={Box}>\r\n        <Box p={2} component={Paper}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            {description}\r\n          </Typography>\r\n          {typeof checkBoxData !== undefined && checkBoxData.addCheckBox ? (\r\n            <div align=\"left\">\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={checkBoxData.isChecked}\r\n                    onChange={checkBoxData.onChange}\r\n                    name={questionId}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Пропустить данный вопрос\"\r\n              />\r\n              <br></br>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Rating\r\n            name={questionId}\r\n            value={currentValue}\r\n            size=\"large\"\r\n            onChange={onChangeEvent}\r\n          />\r\n          {typeof textInput !== undefined && textInput.hasTextInput ? (\r\n            <TextField\r\n              name={questionId}\r\n              label=\"Комментарий\"\r\n              fullWidth\r\n              margin=\"normal\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={textInput.saveComment}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Box>\r\n      </Container>\r\n      <br></br>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RatingComponent;\r\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport RadioButtonComponent from \"./RadioButtonComponent.js\";\nimport TitleComponent from \"./TitleComponent.js\";\nimport DialogComponent from \"./DialogComponent.js\";\nimport TextFieldComponent from \"./TextFieldComponent.js\";\nimport RatingComponent from \"./RatingComponent.js\";\n\nimport \"./App.css\";\nimport { decode } from \"he\";\nimport { post } from \"axios\";\n\nconst survey = JSON.parse(decode(window.survey));\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      items: [],\n      openNotFinished: false,\n      openLoginPage: true,\n      user: \"\",\n    };\n\n    this.onRadioRatingChange = this.onRadioRatingChange.bind(this); // radiobutton value changed\n    this.onSubmit = this.onSubmit.bind(this); // submit button is clicked\n    this.setClose = this.setClose.bind(this); // popup window to be closed\n    this.onUpdateUser = this.onUpdateUser.bind(this); // the user login is entered\n    this.onUserClick = this.onUserClick.bind(this); // the user enter popup window button is clicked\n    this.onCommentChange = this.onCommentChange.bind(this); // the comment is entered\n    this.onCheckBoxChange = this.onCheckBoxChange.bind(this); // checkBox is checked\n  }\n\n  onUpdateUser = (e) => {\n    // if the input value has changed - update the state value\n    this.setState({ user: e.target.value });\n  };\n\n  onUserClick = () => {\n    // create default items (with empty answers and comments)\n    let initialItems = [];\n    for (let item of survey.items)\n      initialItems.push({\n        id: item.id,\n        answer: null,\n        comment: \"\",\n        type: item.type,\n        isFinished: item.type === \"text\",\n        checkBoxChecked: false,\n      });\n\n    // if the entered login is OK -> update state.items and close the popup window\n    if (this.state.user.length > 0)\n      this.setState({ openLoginPage: false, items: initialItems });\n  };\n\n  onRadioRatingChange = (e) => {\n    // create new object as copy of items in current state\n    let currentState = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer and isFinished values for a given item\n    currentState[itemIndex].answer = e.target.value;\n    currentState[itemIndex].isFinished = true;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  onCommentChange = (e) => {\n    // create new object as copy of items in current state\n    let currentState = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer value for a given item\n    currentState[itemIndex].comment = e.target.value;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  onCheckBoxChange = (e) => {\n    // create new object as copy of items in current state\n    let currentState = Object.assign([], this.state.items);\n\n    // find the item that is now changed\n    const itemIndex = currentState.findIndex((elem) => {\n      return elem.id === e.target.name;\n    });\n\n    // update the answer value for a given item\n    currentState[itemIndex].checkBoxChecked = e.target.checked;\n\n    // update state\n    this.setState({\n      items: currentState,\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    // if all questions are finished - post data to server\n    if (\n      this.state.items.every((i) => {\n        return i.isFinished || i.checkBoxChecked;\n      })\n    ) {\n      const url = \"/id=\" + survey.id;\n      const headers = {\n        \"content-type\": \"application/json\",\n      };\n      const data = {\n        surveyId: survey.id,\n        items: this.state.items,\n        user: this.state.user,\n        isFinished: true,\n      };\n      post(url, data, { headers: headers })\n        .then((response) => {\n          console.log(response.data);\n          window.location = \"/answer\";\n        })\n        .catch((error) => {\n          console.log(error);\n        }); // otherwise - open popup window\n    } else this.setState({ openNotFinished: true });\n  };\n\n  setClose = () => {\n    // close the popup window\n    this.setState({ openNotFinished: false });\n  };\n\n  render() {\n    // main array to store questions (items) data\n    let items = [];\n\n    // main loop to fill in the items array\n    for (let item of survey.items) {\n      // in case of single/multiple choice questions - answer options are proceeded\n      const answerOpts =\n        item.type === \"single-choice\" ? item.choiceOpts.split(\"; \") : [];\n\n      // add elements for answer options - if none are given, no elements will be added\n      let radioOpts = [];\n      for (let opt of answerOpts)\n        radioOpts.push(\n          <FormControlLabel value={opt} control={<Radio />} label={opt} />\n        );\n\n      // process \"single-choice\" question type\n      if (item.type === \"single-choice\" && answerOpts.length > 0)\n        items.push(\n          <RadioButtonComponent\n            title={item.id + \") \" + item.name}\n            description={item.description}\n            questionId={item.id}\n            questionValueExpr={\n              this.state.items.map((c) => c.id).includes(item.id)\n                ? this.state.items.filter((c) => {\n                    return c.id === item.id;\n                  })[0].answer\n                : undefined\n            }\n            onChangeEvent={this.onRadioRatingChange}\n            radioOpts={radioOpts}\n            textInput={{\n              hasTextInput: item.addTextBox,\n              saveComment: this.onCommentChange,\n            }}\n            checkBoxData={{\n              addCheckBox: item.addCheckBox,\n              isChecked: this.state.items.map((c) => c.id).includes(item.id)\n                ? this.state.items.filter((c) => {\n                    return c.id === item.id;\n                  })[0].checkBoxChecked\n                : undefined,\n              onChange: this.onCheckBoxChange,\n            }}\n          ></RadioButtonComponent>\n        );\n\n      // process \"text\" question type\n      if (item.type === \"text\")\n        items.push(\n          <TextFieldComponent\n            title={item.id + \") \" + item.name}\n            description={item.description}\n            id={item.id}\n            onCommentChange={this.onCommentChange}\n          />\n        );\n\n      // process \"rating\" question type\n      if (item.type === \"rating\")\n        items.push(\n          <RatingComponent\n            title={item.id + \") \" + item.name}\n            description={item.description}\n            questionId={item.id}\n            currentValue={\n              this.state.items.map((c) => c.id).includes(item.id)\n                ? this.state.items.filter((c) => {\n                    return c.id === item.id;\n                  })[0].answer\n                : undefined\n            }\n            onChangeEvent={this.onRadioRatingChange}\n            textInput={{\n              hasTextInput: item.addTextBox,\n              saveComment: this.onCommentChange,\n            }}\n            checkBoxData={{\n              addCheckBox: item.addCheckBox,\n              isChecked: this.state.items.map((c) => c.id).includes(item.id)\n                ? this.state.items.filter((c) => {\n                    return c.id === item.id;\n                  })[0].checkBoxChecked\n                : undefined,\n              onChange: this.onCheckBoxChange,\n            }}\n          ></RatingComponent>\n        );\n    }\n\n    return (\n      <div className=\"App\" align=\"center\">\n        <DialogComponent\n          openState={this.state.openLoginPage}\n          closeEvent={this.onUserClick}\n          title={\"Авторизация\"}\n          description={\n            \"Укажите, пожалуйста, Ваш логин. Данный логин будет сохранен вместе с Вашими ответами.\"\n          }\n          secondDescription={\"\"}\n          textFieldData={{\n            id: \"login\",\n            label: \"Логин\",\n            value: this.state.user,\n            textOnChange: this.onUpdateUser,\n            error: this.state.user.length === 0,\n          }}\n          buttonOnClick={this.onUserClick}\n          buttonText={\"Сохранить\"}\n        ></DialogComponent>\n\n        <br></br>\n        <TitleComponent\n          title={survey.name}\n          description={survey.description}\n        ></TitleComponent>\n        <br></br>\n        <div>{items}</div>\n        <Button\n          className=\"Margin\"\n          variant=\"contained\"\n          onClick={this.onSubmit}\n          color=\"primary\"\n          size=\"large\"\n        >\n          Завершить опрос\n        </Button>\n        <br></br>\n\n        <DialogComponent\n          openState={this.state.openNotFinished}\n          closeEvent={this.setClose}\n          title={\"Опрос не завершен!\"}\n          description={\n            this.state.items.length !== survey.items.length ||\n            this.state.items.findIndex((c) => {\n              return c.answer === null;\n            }) !== -1\n              ? \"Вы не ответили на вопросы: \" +\n                this.state.items\n                  .filter((c) => {\n                    return !c.isFinished && !c.checkBoxChecked;\n                  })\n                  .map((i) => i.id)\n                  .join(\", \")\n              : \"\"\n          }\n          secondDescription={\n            this.state.user.length === 0 ? \"Логин не указан\" : \"\"\n          }\n          textFieldData={undefined}\n          buttonOnClick={this.setClose}\n          buttonText={\"Закрыть\"}\n        ></DialogComponent>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}